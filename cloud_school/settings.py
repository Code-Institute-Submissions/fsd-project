"""
Django settings for cloud_school project.

Generated by 'django-admin startproject' using Django 2.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import dj_database_url
import sys
from google.oauth2 import service_account


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Check if the environmental variable file exists
if os.path.exists('env.py'):
    # Load enviromnetal variables from env.py
    import env

    # Debug mode is on
    DEBUG = True

else:
    # Debug mode disabled for production
    DEBUG = False


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/


# if test is running
if 'test' in sys.argv:
    # Database settings in test mode
    # use local sqlite db
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3'
        }
    }

else:
    # Database settings for both local development and Heroku
    # Using Heroku Postgres addon
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }

    # Setup default static and media file storage
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

    # Google Drive Storage Settings
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        'google-credentials.json',
    )
    GS_BUCKET_NAME = 'cloud_school'


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')


ALLOWED_HOSTS = [
    'fsd-project.herokuapp.com',
    '127.0.0.1',
]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'materializecssform',
    'anymail',
    'home',
    'accounts',
    'dashboard',
    'shop',
    'cart',
    'checkout',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cloud_school.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.contexts.cart_contents',
            ],
        },
    },
]

WSGI_APPLICATION = 'cloud_school.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.'
        'UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Europe/Dublin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

# Authentication system related settings
# https://docs.djangoproject.com/en/2.2/topics/auth/default/

LOGOUT_REDIRECT_URL = '/'


# Email API Settings
ANYMAIL = {
   "SENDINBLUE_API_KEY": os.environ.get('EMAIL_API_KEY', 'test'),
}
SENDINBLUE_API_URL = 'https://api.sendinblue.com/v3/'
EMAIL_BACKEND = 'anymail.backends.sendinblue.EmailBackend'
DEFAULT_FROM_EMAIL = os.environ.get('DJANGO_EMAIL', 'test@test.com')
SERVER_EMAIL = os.environ.get('DJANGO_EMAIL', 'test@test.com')
EMAIL_SUBJECT = 'Test order confirmation email'
EMAIL_FORM = 'This is an automated email from fsd-project.herokuapp.com.\n'


# Session Settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# set to 1 hour
SESSION_COOKIE_AGE = 3600
SESSION_SAVE_EVERY_REQUEST = True


# Stripe
STRIPE_CURRENCY = 'eur'
STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY', 'test')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', 'test')
